{"version":3,"sources":["../schema.js"],"names":["Dog","name","description","fields","type","resolve","dog","breed","age","has_shots","owner","Owner","getOwners","id","phone","address","dogs","getDogs","Query","owners","args","root","models","findAll","where","Schema","query"],"mappings":";;;;;;AAAA;;AASA;;;;;;AAEA,IAAMA,MAAM,+BAAsB;AAC9BC,UAAM,KADwB;AAE9BC,iBAAa,wBAFiB;AAG9BC,UAH8B,oBAGpB;AACN,eAAO;AACHF,kBAAM;AACFG,4CADE;AAEFC,uBAFE,mBAEOC,GAFP,EAEY;AACV,2BAAOA,IAAIL,IAAX;AACH;AAJC,aADH;AAOHM,mBAAO;AACHH,4CADG;AAEHC,uBAFG,mBAEMC,GAFN,EAEW;AACV,2BAAOA,IAAIC,KAAX;AACH;AAJE,aAPJ;AAaHC,iBAAK;AACDJ,yCADC;AAEDC,uBAFC,mBAEQC,GAFR,EAEa;AACV,2BAAOA,IAAIE,GAAX;AACH;AAJA,aAbF;AAmBHC,uBAAW;AACPL,6CADO;AAEPC,uBAFO,mBAEEC,GAFF,EAEO;AACV,2BAAOA,IAAIG,SAAX;AACH;AAJM,aAnBR;AAyBHC,mBAAO;AACHN,sBAAMO,KADH;AAEHN,uBAFG,mBAEMC,GAFN,EAEW;AACV,2BAAOA,IAAIM,SAAJ,EAAP;AACH;AAJE;AAzBJ,SAAP;AAgCH;AApC6B,CAAtB,CAAZ;;AAuCA,IAAMD,QAAQ,+BAAsB;AAChCV,UAAM,OAD0B;AAEhCC,iBAAa,yBAFmB;AAGhCC,YAAQ,kBAAM;AACV,eAAO;AACHU,gBAAI;AACAT,yCADA;AAEAC,uBAFA,mBAESK,KAFT,EAEgB;AACZ,2BAAOA,MAAMG,EAAb;AACH;AAJD,aADD;AAOHZ,kBAAM;AACFG,4CADE;AAEFC,uBAFE,mBAEOK,KAFP,EAEc;AACZ,2BAAOA,MAAMT,IAAb;AACH;AAJC,aAPH;AAaHa,mBAAO;AACHV,4CADG;AAEHC,uBAFG,mBAEMK,KAFN,EAEa;AACZ,2BAAOA,MAAMI,KAAb;AACH;AAJE,aAbJ;AAmBHC,qBAAS;AACLX,4CADK;AAELC,uBAFK,mBAEIK,KAFJ,EAEW;AACZ,2BAAOA,MAAMK,OAAb;AACH;AAJI,aAnBN;AAyBHC,kBAAM;AACFZ,sBAAM,yBAAgBJ,GAAhB,CADJ;AAEFK,uBAFE,mBAEOK,KAFP,EAEc;AACZ,2BAAOA,MAAMO,OAAN,EAAP;AACH;AAJC;AAzBH,SAAP;AAgCH;AApC+B,CAAtB,CAAd;;AAuCA,IAAMC,QAAQ,+BAAsB;AAChCjB,UAAM,OAD0B;AAEhCC,iBAAa,mBAFmB;AAGhCC,YAAQ,kBAAM;AACV,eAAO;AACHgB,oBAAQ;AACJf,sBAAM,yBAAgBO,KAAhB,CADF;AAEJS,sBAAM;AACFP,wBAAI;AACAT;AADA,qBADF;AAIFU,2BAAO;AACHV;AADG;AAJL,iBAFF;AAUJC,uBAVI,mBAUKgB,IAVL,EAUWD,IAVX,EAUiB;AACjB,2BAAO,aAAGE,MAAH,CAAUZ,KAAV,CAAgBa,OAAhB,CAAwB,EAAEC,OAAOJ,IAAT,EAAxB,CAAP;AACH;AAZG,aADL;AAeHJ,kBAAM;AACFZ,sBAAM,yBAAgBJ,GAAhB,CADJ;AAEFK,uBAFE,mBAEOgB,IAFP,EAEaD,IAFb,EAEmB;AACjB,2BAAO,aAAGE,MAAH,CAAUhB,GAAV,CAAciB,OAAd,CAAsB,EAAEC,OAAOJ,IAAT,EAAtB,CAAP;AACH;AAJC;AAfH,SAAP;AAsBH;AA1B+B,CAAtB,CAAd;;AA6BA,IAAMK,SAAS,2BAAkB;AAC7BC,WAAOR;AACP;AAF6B,CAAlB,CAAf;;kBAKeO,M","file":"schema.js","sourcesContent":["import {\r\n    GraphQLObjectType,\r\n    GraphQLString,\r\n    GraphQLInt,\r\n    GraphQLSchema,\r\n    GraphQLList,\r\n    GraphQLBoolean\r\n} from 'graphql';\r\n\r\nimport Db from './db';\r\n\r\nconst Dog = new GraphQLObjectType({\r\n    name: 'Dog',\r\n    description: 'A dog owned by someone',\r\n    fields () {\r\n        return {\r\n            name: {\r\n                type: GraphQLString,\r\n                resolve (dog) {\r\n                    return dog.name;\r\n                }\r\n            },\r\n            breed: {\r\n                type: GraphQLString,\r\n                resolve (dog) {\r\n                    return dog.breed;\r\n                }\r\n            },\r\n            age: {\r\n                type: GraphQLInt,\r\n                resolve (dog) {\r\n                    return dog.age;\r\n                }\r\n            },\r\n            has_shots: {\r\n                type: GraphQLBoolean,\r\n                resolve (dog) {\r\n                    return dog.has_shots;\r\n                }\r\n            },\r\n            owner: {\r\n                type: Owner,\r\n                resolve (dog) {\r\n                    return dog.getOwners();\r\n                }\r\n            }\r\n        };\r\n    }\r\n});\r\n\r\nconst Owner = new GraphQLObjectType({\r\n    name: 'Owner',\r\n    description: 'This represents a Owner',\r\n    fields: () => {\r\n        return {\r\n            id: {\r\n                type: GraphQLInt,\r\n                resolve (owner) {\r\n                    return owner.id;\r\n                }\r\n            },\r\n            name: {\r\n                type: GraphQLString,\r\n                resolve (owner) {\r\n                    return owner.name;\r\n                }\r\n            },\r\n            phone: {\r\n                type: GraphQLString,\r\n                resolve (owner) {\r\n                    return owner.phone;\r\n                }\r\n            },\r\n            address: {\r\n                type: GraphQLString,\r\n                resolve (owner) {\r\n                    return owner.address;\r\n                }\r\n            },\r\n            dogs: {\r\n                type: new GraphQLList(Dog),\r\n                resolve (owner) {\r\n                    return owner.getDogs();\r\n                }\r\n            }\r\n        };\r\n    }\r\n});\r\n\r\nconst Query = new GraphQLObjectType({\r\n    name: 'Query',\r\n    description: 'Root query object',\r\n    fields: () => {\r\n        return {\r\n            owners: {\r\n                type: new GraphQLList(Owner),\r\n                args: {\r\n                    id: {\r\n                        type: GraphQLInt\r\n                    },\r\n                    phone: {\r\n                        type: GraphQLString\r\n                    }\r\n                },\r\n                resolve (root, args) {\r\n                    return Db.models.owner.findAll({ where: args });\r\n                }\r\n            },\r\n            dogs: {\r\n                type: new GraphQLList(Dog),\r\n                resolve (root, args) {\r\n                    return Db.models.dog.findAll({ where: args });\r\n                }\r\n            }\r\n        };\r\n    }\r\n});\r\n\r\nconst Schema = new GraphQLSchema({\r\n    query: Query,\r\n    // mutation: Mutation\r\n});\r\n\r\nexport default Schema;"]}