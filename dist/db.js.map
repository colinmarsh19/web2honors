{"version":3,"sources":["../db.js"],"names":["Conn","dialect","host","Owner","define","name","type","STRING","allowNull","address","phone","Dog","breed","age","INTEGER","has_shots","BOOLEAN","dogsToOwners","dogId","ownerId","belongsToMany","through","sync","force","then","times","create","firstName","random","number","boolean","findName","streetAddress","phoneNumber","owner","num","findOne","where","id","addDog","dog","result","error","console","log","num2"],"mappings":"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","file":"db.js","sourcesContent":["import Sequelize from 'sequelize';\r\nimport Faker from 'faker';\r\nimport _ from 'lodash';\r\n\r\nconst Conn = new Sequelize(\r\n    'cs4690',\r\n    'postgres',\r\n    'password',\r\n    {\r\n        dialect: 'postgres',\r\n        host: 'localhost'\r\n    }\r\n);\r\n\r\nconst Owner = Conn.define('owner', {\r\n    name: {\r\n        type: Sequelize.STRING,\r\n        allowNull: false\r\n    },\r\n    address: {\r\n        type: Sequelize.STRING,\r\n        allowNull: false\r\n    },\r\n    phone: {\r\n        type: Sequelize.STRING,\r\n        allowNull: false\r\n    }\r\n});\r\n\r\nconst Dog = Conn.define('dog', {\r\n    name: {\r\n        type: Sequelize.STRING,\r\n        allowNull: false\r\n    },\r\n    breed: {\r\n        type: Sequelize.STRING,\r\n        allowNull: false\r\n    },\r\n    age: {\r\n        type: Sequelize.INTEGER,\r\n        allowNull: false\r\n    },\r\n    has_shots: {\r\n        type: Sequelize.BOOLEAN,\r\n        allowNull: false\r\n    }\r\n});\r\n\r\nconst dogsToOwners = Conn.define('dogsToOwners', {\r\n    dogId: {\r\n        type: Sequelize.INTEGER,\r\n        allowNull: false\r\n    },\r\n    ownerId: {\r\n        type: Sequelize.INTEGER,\r\n        allowNull: false\r\n    }\r\n});\r\n\r\n// Relations\r\nOwner.belongsToMany(Dog, {through: 'dogsToOwners'});\r\nDog.belongsToMany(Owner, {through: 'dogsToOwners'});\r\n\r\nConn.sync({ force: true }).then(()=> {\r\n    _.times(10, () => {\r\n        return Dog.create({\r\n            name: Faker.name.firstName(),\r\n            breed: \"Lab\",\r\n            age: Faker.random.number() % 20 + 1,\r\n            has_shots: Faker.random.boolean(),\r\n        });\r\n    });\r\n    _.times(5, () => {\r\n        return Owner.create({\r\n            name: Faker.name.findName(),\r\n            address: Faker.address.streetAddress(),\r\n            phone: Faker.phone.phoneNumber()\r\n        }).then((owner) => {\r\n            let num = Faker.random.number() % 10 + 1;\r\n            Dog.findOne({ where: { id: num  } }).then(dog => {\r\n                owner.addDog(dog).then((result) => {\r\n                }, (error) => {\r\n                    console.log(error);\r\n                });\r\n            });\r\n            let num2 = (num + 1) % 10;\r\n            Dog.findOne({ where: { id: num2 } }).then(dog => {\r\n                owner.addDog(dog).then((result) => {}, (error) => {\r\n                    console.log(error);\r\n                });\r\n            });\r\n        });\r\n    });\r\n});\r\n\r\nexport default Conn;"]}